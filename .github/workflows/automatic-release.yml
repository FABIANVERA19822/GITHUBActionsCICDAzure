name: ghactions-build-imagetag-app
run-name: Deploy App .net8 Hello World ðŸš€ ${{ inputs.Environment }}

on:
  workflow_dispatch:
    inputs:
      Environment:
        type: choice
        description: 'Environment'
        required: true
        options: 
            - dev
            - stg
            - uat
            - prod

permissions:
  id-token: write
  contents: write 
env:
  ACRREPOSITORY: ${{ secrets.ECRREPOSITORY_PROPERTYSVC }}  # acr-jmf-set-helloapp
  ACRREGISTRY: ${{ secrets.ECRREGISTRY }}  # "153169536464.dkr.ecr.us-east-1.amazonaws.com"
  DOCKER_BUILDKIT: ${{ secrets.DOCKER_BUILDKIT }} #1
  AZURE_REGION: ${{ secrets.AWS_REGION }} # "us-east-1"
  ENVSHORTNAME: ${{ secrets.ENV_SHORT_NAME }} # dev,qa,main
  ENVFULLNAME: ${{ secrets.ENV_FULL_NAME }} #development, quality
  NAMESPACE: ${{ secrets.NAMESPACE }} # ns-totira-dev, ns-totira-qa

jobs:
  Workflow_Deployment_LogicApp:
    if: ${{ github.base_ref }} == 'refs/heads/main'
    runs-on: internal
    environment: ${{ inputs.Environment }}

    steps:
     - name: Checkout code
       uses: actions/checkout@v2


     - name: Az CLI login
       uses: azure/login@v1
       with:
         client-id: ${{ vars.AZURE_CLIENT_ID }}
         tenant-id: ${{ vars.AZURE_TENANT_ID }}
         subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
         enable-AzPSSession: true

     - name: Generate SemVer
       id: semver
       run: |
         echo "::set-output name=SEMVER::1.0"
     - name: Generate build ID
       id: prep
       run: |
          sha=${GITHUB_SHA::8}
          ts=$(date +%s%3N)
          echo "::set-output name=BUILD_ID::set-${{ secrets.ENV_SHORT_NAME }}-helloapp-${{ steps.semver.outputs.SEMVER }}.${ts}"

     - name: Build and tag Docker image
       run: docker build -f services/Totira.Services.PropertiesService/src/Totira.Services.PropertiesService/Dockerfile --tag ${{ env.ECRREGISTRY }}/${{ env.ECRREPOSITORY }}:${{ env.BUILD_ID }} .
       working-directory: /src/
       env:
        BUILD_ID: ${{ steps.prep.outputs.BUILD_ID }}
        ECRREGISTRY: ${{ env.ECRREGISTRY }}
        ECRREPOSITORY: ${{ env.ECRREPOSITORY }}

     - name: Get ECR credentials from Kubernetes secret
       run: |
         username=$(kubectl get secret ecr-credentials -n ${{ secrets.NAMESPACE }} -o=jsonpath='{.data.docker-username}' | base64 -d)
         password=$(kubectl get secret ecr-credentials -n ${{ secrets.NAMESPACE }} -o=jsonpath='{.data.docker-password}' | base64 -d)
         echo "::set-output name=USERNAME::$username"
         echo "::set-output name=PASSWORD::$password"
         id: get-credentials

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1
       with:
         registry: ${{ env.ECRREGISTRY }}
         region: ${{ env.AWS_REGION }}
         aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
         aws-session-token: ${{ secrets.ECR_AWS_SESSION_TOKEN }}
         username: ${{ steps.get-credentials.outputs.USERNAME }}
         password: ${{ steps.get-credentials.outputs.PASSWORD }}

     - name: Push Docker image to Amazon ECR
       run: |
         docker push ${{ env.ECRREGISTRY }}/${{ env.ECRREPOSITORY }}:${{ env.BUILD_ID }}
       env:
         ECRREGISTRY: ${{ env.ECRREGISTRY }}
         ECRREPOSITORY: ${{ env.ECRREPOSITORY }}
         BUILD_ID: ${{ steps.prep.outputs.BUILD_ID }}