name: ghactions-build-imagetag-app
run-name: Deploy App .net8 Hello World ðŸš€ ${{ inputs.Environment }}

on:
  workflow_dispatch:
    inputs:
      Environment:
        type: choice
        description: 'Environment'
        required: true
        options: 
            - dev
            - stg
            - uat
            - prod
      AppId:
        type: choice
        description: 'ApplicationId'
        required: true
        options: 
            - a

jobs:
  Continous-integration-App:
    permissions:
      id-token: write
      contents: write 
    if: ${{ github.base_ref }} == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ inputs.Environment }}

    steps:
     - name: Checkout code
       uses: actions/checkout@v4

     - name: Set the repo varables
       id: set_repo_varables
       run: |
             cat env/.env >>${GITHUB_ENV}
     - name: Az CLI login
       uses: azure/login@v1
       with:
         client-id: ${{ secrets.AZURE_CLIENT_ID }}
         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

     - name: Setup .NET Core SDK
       uses: actions/setup-dotnet@v1
       with:
         dotnet-version: '8.0.x'  # Adjust the .NET Core version according to your needs
 
     - name: Restore NuGet packages
       run: dotnet restore
       working-directory: src/ConsoleAppHelloWorld

     - name: Build donet
       run: dotnet build --configuration Release --no-restore
       working-directory: src/ConsoleAppHelloWorld
      
     - name: Run Tests
       run: dotnet test --no-build --verbosity normal  # Runs the tests of the .NET Cor project
       working-directory: src/ConsoleAppHelloWorld
       
     - name: Generate SemVer                       # Generation of Semantic Version
       id: semver
       run: |
         echo "::set-output name=SEMVER::1.0"      
     
     - name: Generate build ID                     # Generation of Build ID
       id: prep
       run: |
          sha=${GITHUB_SHA::8}
          ts=$(date +%s%3N)
          echo "::set-output name=BUILD_ID::${{ steps.semver.outputs.SEMVER }}.${ts}"
     - name: Build and tag Docker image
       run: docker build -f Dockerfile --tag ${{ vars.REGISTRY_NAME }}.azurecr.io/${{env.BU}}-${{env.APPLICATION_NAME}}/${{env.APPLICATION_ROLE}}:${{ env.BUILD_ID }} .
       env:
        BUILD_ID: ${{ steps.prep.outputs.BUILD_ID }}

     - name: Login to Docker Hub needed for cve scan
       uses: docker/login-action@v3
       with:
         username: ${{ secrets.DOCKERHUB_USERNAME }}
         password: ${{ secrets.DOCKERHUB_TOKEN }}

     - name: Analyze for critical and high CVEs
       id: docker-scout-cves
       env:
        BUILD_ID: ${{ steps.prep.outputs.BUILD_ID }}
       uses: docker/scout-action@v1
       with:
         command: cves
         image: ${{ vars.REGISTRY_NAME }}.azurecr.io/${{ env.BU }}-${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_ROLE }}:${{ env.BUILD_ID }}
         only-severities: critical,high
         exit-code: false

     - name: Log in to Azure Container Registry
       env:
         AZURE_CONTAINER_REGISTRY: ${{ vars.REGISTRY_NAME }}.azurecr.io
       run: |
         az acr login --name $AZURE_CONTAINER_REGISTRY
     - name: Push Docker image to Azure ACR  #Push Image to ACR
       run: |
         docker push ${{ vars.REGISTRY_NAME }}.azurecr.io/${{ env.BU }}-${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_ROLE }}:${{ env.BUILD_ID }}
       env:
         BUILD_ID: ${{ steps.prep.outputs.BUILD_ID }}